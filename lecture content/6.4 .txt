# multiplexer, Mux

package main

    import (
        "github.com/skan0779/skan_coin_2022/rest"
    )

    func main() {
        go explorer.Start(4000)
        rest.Start(3000)
    }

package rest

    import (
        "encoding/json"
        "fmt"
        "log"
        "net/http"

        "github.com/skan0779/skan_coin_2022/blockchain"
        "github.com/skan0779/skan_coin_2022/utilities"
    )

    // var port string = ":4000"
    var port string

    type url string
    type url_data struct {
        URL         url    `json:"url"`
        Method      string `json:"method"`
        Description string `json:"description"`
    }
    type requestData struct {
        Message string
    }

    func (u url_data) String() string {
        return "URL Description"
    }

    func (u url) MarshalText() ([]byte, error) {
        url := fmt.Sprintf("http://localhost%s%s", port, u)
        return []byte(url), nil
    }

    func documentation(rw http.ResponseWriter, r *http.Request) {

        data := []url_data{
            {URL: url("/"), Method: "GET", Description: "look up document"},
            {URL: url("/blocks"), Method: "GET", Description: "load blocks"},
            {URL: url("/blocks"), Method: "POST", Description: "add a new block"},
            {URL: url("/blocks/{id}"), Method: "GET", Description: "load a block"},
        }
        rw.Header().Add("Content-Type", "application/json")
        json.NewEncoder(rw).Encode(data)
    }

    func blocks(rw http.ResponseWriter, r *http.Request) {

        switch r.Method {
        case "GET":
            rw.Header().Add("Content-Type", "application/json")
            json.NewEncoder(rw).Encode(blockchain.GetBlockchain().LookBlockchain())
        case "POST":
            var data requestData
            err := json.NewDecoder(r.Body).Decode(&data)
            utilities.ErrHandling(err)
            blockchain.GetBlockchain().AddBlock(data.Message)
            rw.WriteHeader(http.StatusCreated)
        }
    }

    // start function with the port code
    func Start(p int) {

        port = fmt.Sprintf(":%d", p)
        handler := http.NewServeMux()
        handler.HandleFunc("/", documentation)
        handler.HandleFunc("/blocks", blocks)
        handler.HandleFunc("/blocks/{id}", block)

        fmt.Println("Start Server" + port)
        log.Fatal(http.ListenAndServe(port, handler))
    }

package explorer

    import (
        "fmt"
        "html/template"
        "log"
        "net/http"

        "github.com/skan0779/skan_coin_2022/blockchain"
    )

    var templates *template.Template
    var port string

    type homepageData struct {
        Context  string
        PageName string
        Blocks   []*blockchain.Block
    }

    func homepage(rw http.ResponseWriter, r *http.Request) {

        data := homepageData{
            PageName: "Home",
            Context:  "Welcome to skan coin!",
            Blocks:   blockchain.GetBlockchain().LookBlockchain(),
        }
        templates.ExecuteTemplate(rw, "home", data)
    }

    func addpage(rw http.ResponseWriter, r *http.Request) {

        switch r.Method {
        case "GET":
            templates.ExecuteTemplate(rw, "add", "")
        case "POST":
            r.ParseForm()
            data := r.Form.Get("addBlockData")
            blockchain.GetBlockchain().AddBlock(data)
            http.Redirect(rw, r, "/", http.StatusPermanentRedirect)
        }
    }

    func Start(p int) {

        port = fmt.Sprintf(":%d", p)
        handler := http.NewServeMux()

        templates = template.Must(template.ParseGlob("explorer/templates/pages/*.gohtml"))
        templates = template.Must(templates.ParseGlob("explorer/templates/components/*.gohtml"))

        handler.HandleFunc("/", homepage)
        handler.HandleFunc("/add", addpage)

        fmt.Println("start local server" + port)
        log.Fatal(http.ListenAndServe(port, handler))
    }

